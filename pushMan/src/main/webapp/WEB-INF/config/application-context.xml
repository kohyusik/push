<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/jee
        http://www.springframework.org/schema/jee/spring-jee.xsd
        http://mybatis.org/schema/mybatis-spring
        http://mybatis.org/schema/mybatis-spring.xsd">


	<!-- 페이지 컨트롤러는 제외하고 객체 준비하는 베이스 패키지 -->
	<context:component-scan base-package="com.pushman">
		<context:exclude-filter type="regex" 
		    					expression="com.pushman.web.*" />
	</context:component-scan>

	
	<!-- DB 커넥션풀(DataSource)의 객체를 지정 -->
	<jee:jndi-lookup id="dataSource"  jndi-name="jdbc/java67db" />
	<jee:jndi-lookup id="dataSource2" jndi-name="jdbc/test2016" />
	<jee:jndi-lookup id="dataSource3" jndi-name="jdbc/pms" />

	<!-- dataSource 여러 개 맵핑 -->
	<bean id="multipleDataSource" class="com.pushman.util.MultipleDataSource">
		<property name="defaultTargetDataSource" ref="dataSource" />
		<property name="targetDataSources">
			<map>
				<entry key="localDB" 	value-ref="dataSource" />
				<entry key="iHeartDB" 	value-ref="dataSource2" />
				<entry key="pushpiaDB" 	value-ref="dataSource3" />
			</map>
		</property>
	</bean>

		
	<!-- SqlSessionFactory 객체를 지정 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="multipleDataSource"/>
		 
		<!-- 지정한 패키지에 있는 클래스에 대해 단축 이름(클래스명)을 자동으로 지정 -->
		<property name="typeAliasesPackage" value="com.pushman.domain" />
		
		<!-- mybatis에서 사용하는 SQL 파일의 위치 정보를 지정한다. -->
    	<property name="mapperLocations" 
              	  value="classpath*:com/pushman/dao/*Dao.xml" />
	</bean>

	
	<!-- @Transactional 애노테이션을 처리할 객체를 등록한다. -->
	<tx:annotation-driven transaction-manager="txManager" />

	<!-- 트랜잭션 정책 정의 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" propagation="NOT_SUPPORTED" />
			<tx:method name="list*" propagation="NOT_SUPPORTED" />
			<tx:method name="size*" propagation="NOT_SUPPORTED" />
			<tx:method name="log*" propagation="SUPPORTS" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!-- 트랜잭션을 어떤 객체에 걸 것인지 지정한다. -->
	<aop:config>
		<!-- 객체 지정 -->
		<aop:pointcut id="productServiceMethods" expression="execution(* com..*Service.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="productServiceMethods" />
	</aop:config>

	<!-- 트랜잭션 관리자 객체를 지정한다. -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource"  ref="multipleDataSource" />
	</bean>


	<mybatis:scan base-package="com.pushman.dao" />
</beans>
